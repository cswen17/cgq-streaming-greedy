ExchangeCandidates.scala -- looks messy

Need to run StreamingGreedy once to see what the result is

Remember the lambda console setup: vertex label function and log marginal value return function

where are the AWS credentials coming from?

=========

Dec. 18, 2019

Made an sbt Task for running StreamingGreedy quickly

Connie, please add some pretty logging around the entire lambda request-response sequence.
 + start of request
 + what payload was sent off in the request
 + name of the lambda function

 + start of response
 + response body

=========

Dec. 19, 2019

I really need to plan out logging.

+ Want to see the algorithm steps are working
+ Want to see what happens when Redis calls don't work
+ Want to see what happens when lambda calls don't work

+ Lambda cases:
   ...

========

Dec. 20, 2019

Finished Lambda client logging
Lost motivation for other logging

+ Need to clean up ExchangeCandidates.scala
+ Need to figure out the role of Redis in the implementation. Where does SADD get called/when do elements get added to the set?
+ Need to implement the alpha beta stuff

========

Dec. 21, 2019

NICE TO HAVE:
 Return the error message from lambda to the user when a ground set label doesn't match. Then the user doesn't have to look
 in the logs to see their user error.

 Path Plan:
   LambdaClient#invoke returns full LambdaResponse object to caller instead of result
   ExchangeCandidates#GroundSetCondition#eInN_L also returns LambdaResponse object to caller
   ExchangeCandidates#GroundSetCondition#check takes the result of eInN_L, determines short circuit based on the boolean part, returns LambdaResponse object to caller if some tag on the LambdaResponse matches client error

   All callers of LambdaClient#invoke change to handle LambdaResponse object instead of raw boolean

=======

Dec. 22, 2019

=======

Jan. 8, 2020

Which is faster, calling SREM 10x, or calling SADD 10x and then calling SDIFF?

Right now most of if f_S(e) >= \alpha + (1 + \beta)(\sum_{c \in C}v(f, S, c)) is implemented, but I need to implement S = S \ C + e

S = S \ C + e can be stored using Redis, but from iteration to iteration of StreamingGreedy,
having an inconsistent state on S might lead to correctness issues,
while implementing an append-only storage scheme might have performance issues

=======

Jan. 8, 2020

Need to write StreamingGreedy for streams, i.e. rewrite .run() to poll a stream and call one iter of StreamingGreedy per polled element
Need to test multiple iterations of StreamingGreedy
Need to change VertexSet to user given Element type in StreamingGreedy

=======

Jan. 12, 2020

StreamingGreedy has been converted to user inputted API objects instead of the implementation-specific Vertex* objects
Might want to write an AWS Kinesis client
Or could start on a Text stream client
Then need to write a controller to start a StreamingGreedy job

=======

Jan. 20, 2020

Controller to start, stream, and summarize a StreamingGreedy job is finished
PackagingModel is finished
Token authorization is finished
Need to make a factory for StreamingGreedy API classes

======
